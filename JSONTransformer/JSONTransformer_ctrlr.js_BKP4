/**
 * @projectDescription	Displays demographic information for a single patient set.
 * @inherits	i2b2
 * @namespace	i2b2.JSONTransformer
 * @author		
 * @version 	1.0
 * ----------------------------------------------------------------------------------------
 */

i2b2.JSONTransformer.Init = function(loadedDiv) {
	// register DIV as valid DragDrop target for Patient Record Sets (QM) objects
	var op_trgt = {dropTarget:true};
	i2b2.sdx.Master.AttachType("JSONTransformer-QMDROP", "QM", op_trgt);
	// drop event handlers used by this plugin
	i2b2.sdx.Master.setHandlerCustom("JSONTransformer-QMDROP", "QM", "DropHandler", i2b2.JSONTransformer.qmDropped);

	// manage YUI tabs
	this.yuiTabs = new YAHOO.widget.TabView("JSONTransformer-TABS", {activeIndex:0});
	this.yuiTabs.on('activeTabChange', function(ev) { 
		//Tabs have changed 
		if (ev.newValue.get('id')=="JSONTransformer-TAB1") {
			// user switched to Results tab
			if (i2b2.JSONTransformer.model.qmRecord) {
				// contact PDO only if we have data
				if (i2b2.JSONTransformer.model.dirtyResultsData) {
					// recalculate the results only if the input data has changed
					i2b2.JSONTransformer.getResults();
				}
			}
		}
	});
	
	z = $('anaPluginViewFrame').getHeight() - 34;
	$$('DIV#JSONTransformer-TABS DIV.JSONTransformer-MainContent')[0].style.height = z;
	$$('DIV#JSONTransformer-TABS DIV.JSONTransformer-MainContent')[1].style.height = z;
	$$('DIV#JSONTransformer-TABS DIV.JSONTransformer-MainContent')[2].style.height = z;
	
};

i2b2.JSONTransformer.Unload = function() {
	// purge old data
	i2b2.JSONTransformer.model.qmRecord = false;
	return true;
};

i2b2.JSONTransformer.qmDropped = function(sdxData) {
	sdxData = sdxData[0];	// only interested in first record
	// save the info to our local data model
	i2b2.JSONTransformer.model.qmRecord = sdxData;
	// let the user know that the drop was successful by displaying the name of the patient set
	$("JSONTransformer-QMDROP").innerHTML = i2b2.h.Escape(sdxData.sdxInfo.sdxDisplayName+"[QMid="+sdxData.sdxInfo.sdxKeyValue+"]");
	// temporarly change background color to give GUI feedback of a successful drop occuring
	$("JSONTransformer-QMDROP").style.background = "#CFB";
	setTimeout("$('JSONTransformer-QMDROP').style.background='#DEEBEF'", 250);	
	// optimization to prevent requerying the hive for new results if the input dataset has not changed
	i2b2.JSONTransformer.model.dirtyResultsData = true;		
};

i2b2.JSONTransformer.getResults = function() {
	if (!(i2b2.JSONTransformer.model.dirtyResultsData)) return false;
      var qmid="?QMid="+i2b2.JSONTransformer.model.qmRecord.sdxInfo.sdxKeyValue; 
      var qmidenc =encodeURIComponent(qmid)
      var reqURL= "http://i2b2app.sis.nyp.org:9088/i2b2JSONServlet/";
      reqURL=reqURL +qmid;

//        reqURL=encodeURIComponent(reqURL);
//       var result =i2b2.h.getJsonConfig(URL.createObjectURL(reqURL));
//        var i2b2ajaxres = i2b2AjaxRequest(reqURL);
//        var result =i2b2ajaxres.transport.responseText;
   var result =ajaxSyncRequest(reqURL);

			$$("DIV#JSONTransformer-mainDiv DIV#JSONTransformer-TABS DIV.results-working")[0].show();			
			$$("DIV#JSONTransformer-mainDiv DIV#JSONTransformer-TABS DIV.results-finished")[0].show();


			var s = '';
			
			s += '<div class="intro">';
			s += 'JSON transformation of request_xml query definition of QM previous query. ';
			s += '</div>';

			s += '<div class="resultLV">';
			s += '<div class="resultLbl">Query definition:</div>';
			s += '<div class="resultVal">' + i2b2.JSONTransformer.model.qmRecord.sdxInfo.sdxDisplayName + '</div>';
			s += '</div>'
                      
                        s += '<div class="resultLV">';
                        s += '<div class="resultLbl">Query_Master_id:</div>';
                        s += '<div class="resultVal">' + i2b2.JSONTransformer.model.qmRecord.sdxInfo.sdxKeyValue + '</div>';
                        s += '</div>'
	
			s += '<div class="resultLV">';
			s += '<div class="resultLbl">URL:</div>';
			s += '<div class="resultVal">'+reqURL+ '</div>';
			s += '</div>'

                        s += '<br/>';

			s += '<div class="resultLbl">Servlet:</div>';
                        s += '<div class="resultVal">'+ result + '</div>';
                        s += '</div>'
			
			
			s += '<br/>';

			$$("DIV#JSONTransformer-mainDiv DIV#JSONTransformer-TABS DIV.results-working")[0].innerHTML = s;

			// optimization - only requery when the input data is changed
			i2b2.JSONTransformer.model.dirtyResultsData = false;		
		
		$$("DIV#JSONTransformer-mainDiv DIV#JSONTransformer-TABS DIV.results-directions")[0].show();
		$$("DIV#JSONTransformer-mainDiv DIV#JSONTransformer-TABS DIV.results-finished")[0].show();
		$$("DIV#JSONTransformer-mainDiv DIV#JSONTransformer-TABS DIV.results-working")[0].show();		
		
		// AJAX CALL USING THE EXISTING CRC CELL COMMUNICATOR
    //    ajaxSyncRequest(reqURL);
	
}

function ajaxSyncRequest(reqURL) {
    //Creating a new XMLHttpRequest object
    var xmlhttp;
    if (window.XMLHttpRequest){
        xmlhttp = new XMLHttpRequest(); //for IE7+, Firefox, Chrome, Opera, Safari
    } else {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP"); //for IE6, IE5
    }
    //Create a asynchronous GET request


    xmlhttp.open("GET", reqURL, false);
   xmlhttp.overrideMimeType("text/plain; charset=x-user-defined");
  
// xmlhttp.responseType = "arraybuffer";
  xmlhttp.send(null);
     
    //Execution blocked till server send the response

   if (xmlhttp.readyState == 4) {
        if (xmlhttp.status == 200)
        { // document.getElementById("message").innerHTML =
 alert('Nothing is wrong !!'+xmlhttp.responseText);

 return xmlhttp.responseText;
        }
        else
        {
            alert('Something is wrong !!'+reqURL);
        }
    }
}


function i2b2AjaxRequest(reqURL) {
 var commOptions = {
                        contentType: 'text/plain',
                        method: 'get',
                        asynchronous: false,
                        evalJS: false,
                        evalJSON: false
                };
 var ajaxresult = new Ajax.Request(reqURL, commOptions);

 var transport = ajaxresult.transport;
                        // create our data message to return from the function
                        var cbMsg = {
                                msgRequest: sMessage,
                                msgResponse: transport.responseText,
                                msgUrl: sUrl,
                                msgUrlProxy: sProxy_Url,
                                error: false
                        };

return obMsg;
}
